# --- Teeth of Time default config file ---
#
# This file contains all parameters used in Teeth of Time
# If a line is missing in the config, Teeth of Time uses internal default value
# Each config line successfuly loaded is printed in console
# Mistyped or non-existing parameters are printed as "Invalid line: <information>"
#
# This config is the same as the MODERATE config file.
#
# ---------------

# fallBlock - blocks listed here will fall down
fallBlock = { 4, 5, 17, 20, 22, 23, 24, 25, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 57, 58, 61, 62, 67, 80, 84, 85, 86, 87, 88, 89, 91 };

# smashBlock - blocks listed here will be destroyed by falling blocks if they happen to fall on them
smashBlock = { 50, 78, 44, 31, 6, 65, 66, 55, 59, 85, 93, 94, 75, 76, 63, 68, 69, 70, 72, 77, 81, 30, 83, 26, 51, 92, 37, 38, 39, 40 };

# fallThroughBlock - blocks listed here will not act as solid for falling blocks, used to make blocks fall through liquids
fallThroughBlock = { 8, 9, 10, 11 };

# mutateBlock - this array determines wich blocks will transform into others and how likely is the transformation to happen
# - the first value determines blocks that change
# - the second value determines what the blocks change into
# - the third value determines the minimal chance of the change happening (in percent)
# - the fourth value determines the maximal chance of the change happening (in percent)
# example: mutateBlock = { 5, 41, 60, 90 }; - changes 60 to 90 percent of wood planks (5) into gold blocks (41)
mutateBlock = { { 50, 0, 70, 90 }, { 4, 48, 15, 30 }, { 60, 2, 20, 40 }, { 64, 0, 15, 40 }, { 71, 0, 5, 15 }, { 80, 0, 25, 50 } };

# ---------------

# passN - how many times is each chunk processed. Higher values mean stronger destruction.
passN = 4;

# sidewaysPassN - how many times do blocks topple and fall sideways. This is resource intensive, so it's usually only run only a few times
sidewaysPassN = 2;

# fallChance - minimum and maximum chance to fall in each pass (in percent)
fallChance = { 10, 30 };

# fallKillChance - minimum and maximum chance to be destroyed in each pass (in percent)
fallKillChance = { 3, 15 };

# sidewaysFallChance - minimum and maximum chance to slide and fall sideways in each pass (in percent)
sidewaysFallChance = { 15, 40 };

# ---------------
# Smoothstone uses a special function designed to be as fast as possible. This allows it to use different variables. 
# Low amount of passes is recommended

# stonePassN - how many times is each chunk processed. Higher values mean stronger destruction.
stonePassN = 2;

# stoneSidewaysPassN - how many times do blocks topple and fall sideways. This is resource intensive, so it's usually only run only a few times
stoneSidewaysPassN = 1;

# stoneFallChance - minimum and maximum chance to fall in each pass (in percent)
stoneFallChance = { 20, 50 };

# stoneFallKillChance - minimum and maximum chance to be destroyed in each pass (in percent)
stoneFallKillChance = { 7, 20 };

# stoneSidewaysFallChance - minimum and maximum chance to slide and fall sideways in each pass (in percent)
stoneSidewaysFallChance = { 60, 100 };

# stoneAdvanced - determines if the advanced or simple algorithm will be used. Advanced has much better results, but is somewhat slower
stoneAdvanced = true;

# ---------------

# fallSpread - how far can blocks fall horizontaly from their original position. Aplies for both normal and smoothstone ageing.
fallSpread = 2;

# ---------------

# natureKillChance - probability of eroding topmost blocks into block specified by natureKillTo.
# Using it together with natureRepopulation will allow grass, trees and such to grow on buildings
natureKillChance = { 5, 20 };

# natureKillBlock - wich blocks can be eroded into grass
natureKillBlock = { 3, 5, 17, 25, 26, 35, 47, 53, 58, 63, 72, 84, 85, 92, 96 };

# natureKillTo - what will topmost blocks erode to (default grass).
natureKillTo = 2;

# natureRepopulation - replace all living things and ores with new ones. This allows nature to take over creations.
# Warning - setting this to true will let Minecraft regenerate all trees, ores, etc. on the chunk. 
# The world may be laggy for a while when first launched.
natureRepopulation = true;

# natureLivingReplace - wich living things should be replaced. Leave empty to only add to existing.
# Only works when natureRepopulation is true
natureLivingReplace = { 6, 18, 19, 31, 32, 37, 38, 39, 40, 59, 81, 83, 86, 91 };

# natureOresReplace - wich ores should be replaced. Leave empty to only add to existing ores.
# Only works when natureRepopulation is true
natureOresReplace = { 14, 15, 16, 21, 56, 73, 74 };

# ---------------

# globalRelight - whether each block is relighted separately in the run or all chunks are relighted globally later. 
# Use false if you don't mess with many blocks, otherwise set it to true
globalRelight = true;